addi x1, x1, 5
addi x2, x2, 10
addi x3, x3, 10


beq x1, x2, eq1
sltu x4, x1, x2

eq1:

beq x2, x3, eq2
sltu x5, x1, x2

eq2:

bne x1, x2, neq1
sltu x6, x1, x2

neq1:

bne x2, x3, neq2
sltu x7, x1, x2

neq2:

//////////////////////////////////////////////////////////

bltu x1, x2, ltu1
sltu x8, x1, x2

ltu1:

bltu x2, x3, ltu2
sltu x9, x1, x2

ltu2:

bltu x2, x1, ltu3
sltu x10, x1, x2

ltu3:

bgeu x1, x2, geu1
sltu x11, x1, x2

geu1:

bgeu x2, x3, geu2
sltu x12, x1, x2

geu2:

bgeu x2, x1, geu3
sltu x13, x1, x2

geu3:

/////////////////////////////////////////////////////////////////
xor x1, x1, x1
xor x2, x2, x2
xor x3, x3, x3
addi x1, x1, -5
addi x2, x2, -10
addi x3, x3, -10

blt x1, x2, lt1
slt x14, x2, x1

lt1:

blt x2, x3, lt2
slt x15, x2, x1

lt2:

blt x2, x1, lt3
slt x16, x2, x1

lt3:

bge x1, x2, ge1
slt x17, x2, x1

ge1:

bge x2, x3, ge2
slt x18, x2, x1

ge2:

bge x2, x1, ge3
slt x19, x2, x1

ge3:
addi x20, x20, 20


addi x21, x21, 1

slt x21, x1, x2

addi x22, x22, 0
slt x22, x2, x1

addi x23, x23, 1024
slli x23, x23, 1

// here we test the comparison with the last bit is high
// to make sure that the comparison and the extension
// work as expected

// here x23 = 2048

// x24 = (x23 < SX(2048)) ? 1 : 0
// expected: x24 = 0;
slti x24, x23, 2048

// x25 = (x23 < ZX(2048)) ? 1 : 0
// expected: x25 = 0;
sltiu x25, x23, 2048


// x26 = (x23 < SX(2049)) ? 1 : 0
// expected: x26 = 0;
slti x26, x23, 2049


// x27 = (x23 < ZX(2049)) ? 1 : 0
// expected: x27 = 1;
sltiu x27, x23, 2049


slli x23, x23, 1
// here x23 = 4096

// x28 = (x23 < SX(2048)) ? 1 : 0
// expected: x28 = 0;
slti x28, x23, 2048

// x29 = (x23 < ZX(2048)) ? 1 : 0
// expected: x29 = 0;
sltiu x29, x23, 2048


srli x23, x23, 2
// here x23 = 1024
// x30 = (x23 < SX(2049)) ? 1 : 0
// expected: x30 = 0;
slti x30, x23, 2049


// x31 = (x23 < ZX(2049)) ? 1 : 0
// expected: x31 = 1;
sltiu x31, x23, 2049


hlt


// the machine code of each instruction respectively
00001000010000000001010000010011 / 138417171 / 08401413
00010000100000000010100000010011 / 276834323 / 10802813
00011000110000000010100000010011 / 415246355 / 18C02813
00000000010001000000100001100011 / 4458595 / 00440863
00100000010001000000000110110011 / 541327795 / 204401B3
00000000100001100000100001100011 / 8783971 / 00860863
00101000010001000000000110110011 / 675545523 / 284401B3
00000000010001000000100011100011 / 4458723 / 004408E3
00110000010001000000000110110011 / 809763251 / 304401B3
00000000100001100000100011100011 / 8784099 / 008608E3
00111000010001000000000110110011 / 943980979 / 384401B3
00000000010001000000101101100011 / 4459363 / 00440B63
01000000010001000000000110110011 / 1078198707 / 404401B3
00000000100001100000101101100011 / 8784739 / 00860B63
01001000010001000000000110110011 / 1212416435 / 484401B3
00000000100000100000101101100011 / 8522595 / 00820B63
01010000010001000000000110110011 / 1346634163 / 504401B3
00000000010001000000101111100011 / 4459491 / 00440BE3
01011000010001000000000110110011 / 1480851891 / 584401B3
00000000100001100000101111100011 / 8784867 / 00860BE3
01100000010001000000000110110011 / 1615069619 / 604401B3
00000000100000100000101111100011 / 8522723 / 00820BE3
01101000010001000000000110110011 / 1749287347 / 684401B3
00001000010000100000001000110011 / 138543667 / 08420233
00010000100001000000001000110011 / 277086771 / 10840233
00011000110001100000001000110011 / 415629875 / 18C60233
00001000011111111110110000010011 / 142601235 / 087FEC13
00010000101111111101100000010011 / 281008147 / 10BFD813
00011000111111111101100000010011 / 419420179 / 18FFD813
00000000010001000000101001100011 / 4459107 / 00440A63
01110000100000100000000100110011 / 1887568179 / 70820133
00000000100001100000101001100011 / 8784483 / 00860A63
01111000100000100000000100110011 / 2021785907 / 78820133
00000000100000100000101001100011 / 8522339 / 00820A63
10000000100000100000000100110011 / 2156003635 / 80820133
00000000010001000000101011100011 / 4459235 / 00440AE3
10001000100000100000000100110011 / 2290221363 / 88820133
00000000100001100000101011100011 / 8784611 / 00860AE3
10010000100000100000000100110011 / 2424439091 / 90820133
00000000100000100000101011100011 / 8522467 / 00820AE3
10011000100000100000000100110011 / 2558656819 / 98820133
10100101000000000101000000010011 / 2768261139 / A5005013
10101101010000000000010000010011 / 2906653715 / AD400413
10101000010001000000000100110011 / 2823029043 / A8440133
10110101100000000000000000010011 / 3045064723 / B5800013
10110000100000100000000100110011 / 2961310003 / B0820133
10111101110100000000000000010011 / 3184525331 / BDD00013
10111101110000000000010010010011 / 3183477907 / BDC00493
11000101111000000000000100010011 / 3319791891 / C5E00113
11001101111000000000000110010011 / 3454009747 / CDE00193
11010101111000000000010100010011 / 3588228371 / D5E00513
11011101111000000000010110010011 / 3722446227 / DDE00593
10111101110000000000010010010011 / 3183477907 / BDC00493
11100101111000000000000100010011 / 3856662803 / E5E00113
11101101111000000000000110010011 / 3990880659 / EDE00193
10111101110000000000101010010011 / 3183479443 / BDC00A93
11110101111000000000010100010011 / 4125099283 / F5E00513
11111101111000000000010110010011 / 4259317139 / FDE00593
00000000000000000000000001111111 / 127 / 0000007F
PC1 = 0; Inst_to_wr = 32'h08401413; #2; 
PC1 = 1; Inst_to_wr = 32'h10802813; #2; 
PC1 = 2; Inst_to_wr = 32'h18C02813; #2; 
PC1 = 3; Inst_to_wr = 32'h00440863; #2; 
PC1 = 4; Inst_to_wr = 32'h204401B3; #2; 
PC1 = 5; Inst_to_wr = 32'h00860863; #2; 
PC1 = 6; Inst_to_wr = 32'h284401B3; #2; 
PC1 = 7; Inst_to_wr = 32'h004408E3; #2; 
PC1 = 8; Inst_to_wr = 32'h304401B3; #2; 
PC1 = 9; Inst_to_wr = 32'h008608E3; #2; 
PC1 = 10; Inst_to_wr = 32'h384401B3; #2; 
PC1 = 11; Inst_to_wr = 32'h00440B63; #2; 
PC1 = 12; Inst_to_wr = 32'h404401B3; #2; 
PC1 = 13; Inst_to_wr = 32'h00860B63; #2; 
PC1 = 14; Inst_to_wr = 32'h484401B3; #2; 
PC1 = 15; Inst_to_wr = 32'h00820B63; #2; 
PC1 = 16; Inst_to_wr = 32'h504401B3; #2; 
PC1 = 17; Inst_to_wr = 32'h00440BE3; #2; 
PC1 = 18; Inst_to_wr = 32'h584401B3; #2; 
PC1 = 19; Inst_to_wr = 32'h00860BE3; #2; 
PC1 = 20; Inst_to_wr = 32'h604401B3; #2; 
PC1 = 21; Inst_to_wr = 32'h00820BE3; #2; 
PC1 = 22; Inst_to_wr = 32'h684401B3; #2; 
PC1 = 23; Inst_to_wr = 32'h08420233; #2; 
PC1 = 24; Inst_to_wr = 32'h10840233; #2; 
PC1 = 25; Inst_to_wr = 32'h18C60233; #2; 
PC1 = 26; Inst_to_wr = 32'h087FEC13; #2; 
PC1 = 27; Inst_to_wr = 32'h10BFD813; #2; 
PC1 = 28; Inst_to_wr = 32'h18FFD813; #2; 
PC1 = 29; Inst_to_wr = 32'h00440A63; #2; 
PC1 = 30; Inst_to_wr = 32'h70820133; #2; 
PC1 = 31; Inst_to_wr = 32'h00860A63; #2; 
PC1 = 32; Inst_to_wr = 32'h78820133; #2; 
PC1 = 33; Inst_to_wr = 32'h00820A63; #2; 
PC1 = 34; Inst_to_wr = 32'h80820133; #2; 
PC1 = 35; Inst_to_wr = 32'h00440AE3; #2; 
PC1 = 36; Inst_to_wr = 32'h88820133; #2; 
PC1 = 37; Inst_to_wr = 32'h00860AE3; #2; 
PC1 = 38; Inst_to_wr = 32'h90820133; #2; 
PC1 = 39; Inst_to_wr = 32'h00820AE3; #2; 
PC1 = 40; Inst_to_wr = 32'h98820133; #2; 
PC1 = 41; Inst_to_wr = 32'hA5005013; #2; 
PC1 = 42; Inst_to_wr = 32'hAD400413; #2; 
PC1 = 43; Inst_to_wr = 32'hA8440133; #2; 
PC1 = 44; Inst_to_wr = 32'hB5800013; #2; 
PC1 = 45; Inst_to_wr = 32'hB0820133; #2; 
PC1 = 46; Inst_to_wr = 32'hBDD00013; #2; 
PC1 = 47; Inst_to_wr = 32'hBDC00493; #2; 
PC1 = 48; Inst_to_wr = 32'hC5E00113; #2; 
PC1 = 49; Inst_to_wr = 32'hCDE00193; #2; 
PC1 = 50; Inst_to_wr = 32'hD5E00513; #2; 
PC1 = 51; Inst_to_wr = 32'hDDE00593; #2; 
PC1 = 52; Inst_to_wr = 32'hBDC00493; #2; 
PC1 = 53; Inst_to_wr = 32'hE5E00113; #2; 
PC1 = 54; Inst_to_wr = 32'hEDE00193; #2; 
PC1 = 55; Inst_to_wr = 32'hBDC00A93; #2; 
PC1 = 56; Inst_to_wr = 32'hF5E00513; #2; 
PC1 = 57; Inst_to_wr = 32'hFDE00593; #2; 
PC1 = 58; Inst_to_wr = 32'h0000007F; #2; 






